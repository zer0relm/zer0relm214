Script started on 2020-04-03 17:17:59-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="188" LINES="28"]
]0;zer0relm@AJ-Desktop:~/cs214/Labs/Lab07/Ada[01;32m[zer0relm@AJ-Desktop[01;37m Ada[01;32m]$[00m cat name_tester.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: AJ Vrieland
-- Date: 04/03/2020
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

  -- replace this line with the definition of NAME_SIZE
  NAME_SIZE : constant Integer := 8;
  -- replace this line with the definition of Name
  type Name is record
    myFirst, myMiddle, myLast : String(1..NAME_SIZE);
  end record;
  aName : Name ;


  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  -- replace this line with the definition of Init()
procedure Init(theName : out Name; First, Middle, Last : in String) is
begin
  theName.myFirst := First;
  theName.myMiddle := Middle;
  theName.myLast := Last;
end Init;

  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  -- replace this line with the definition of getFirst()
function getFirst(theName : in Name) return String is
begin
  return theName.myFirst;
end getFirst;

  -- replace this line with the doc and def of getMiddle()
  function getMiddle(theName : in Name) return String is
  begin
    return theName.myMiddle;
  end getMiddle;

  -- replace this line with the doc and def of getLast()
  function getLast(theName : in Name) return String is
  begin
    return theName.myLast;
  end getLast;

  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

  -- replace this line with the definition of getFullName()
  function getFullName(theName : in Name) return String is
  begin
    return theName.myFirst & theName.myMiddle & theName.myLast;
  end getFullName;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

  -- replace this line with the definition of Put()
  procedure Put(theName : in Name ) is
  begin
    Put(getFullName(theName));
  end Put;

begin
   Init(aName, "John    ", "Paul    ", "Jones   ");

   pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
   pragma Assert( getFullName(aName) = "John    Paul    Jones   ",
                    "getFullName() failed");

   Put(aName); New_line;
   Put("All tests passed!"); New_line;

end name_tester;
]0;zer0relm@AJ-Desktop:~/cs214/Labs/Lab07/Ada[01;32m[zer0relm@AJ-Desktop[01;37m Ada[01;32m]$[00m make ada
make: Nothing to be done for 'ada'.
]0;zer0relm@AJ-Desktop:~/cs214/Labs/Lab07/Ada[01;32m[zer0relm@AJ-Desktop[01;37m Ada[01;32m]$[00m ./name_tester 
John    Paul    Jones   
All tests passed!
]0;zer0relm@AJ-Desktop:~/cs214/Labs/Lab07/Ada[01;32m[zer0relm@AJ-Desktop[01;37m Ada[01;32m]$[00m exit

Script done on 2020-04-03 17:18:15-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-04-03 17:18:28-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="188" LINES="28"]
]0;zer0relm@AJ-Desktop:~/cs214/Labs/Lab07/Clojure[01;32m[zer0relm@AJ-Desktop[01;37m Clojure[01;32m]$[00m cat src/nameTester.clj
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: AJ Vrieland (ajv234)
;;;; Date: 04/03/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name
;;; (which compiles to a Java class).
(defrecord Name [myFirst myMiddle myLast])

; Replace this line with the definition of record-type Name


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings.
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with a definition of function make-Name
(defn make-Name [First Middle Last]
  (->Name First Middle Last)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with the definition of getFirst()
(defn getFirst [^Name theName]
  (:myFirst theName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name.
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with the definition of getMiddle()
(defn getMiddle [^Name theName]
  (:myMiddle theName)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name.
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with the definition of getLast()
(defn getLast [^Name theName]
  (:myLast theName)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName() returns a full name in F-M-L order.
;;; Receive: aName, a Name.
;;; Return: firstName, middleName, lastName,
;;;           separated by spaces.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with a definition of toString()
(defn toString [^Name theName]
  (str (:myFirst theName) " " (:myMiddle theName) " " (:myLast theName))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the strings in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with a definition of printName()
(defn printName [^Name theName]
  (print (toString theName))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions.
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
      name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
      name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                               ; -mapping field-names to values
      name3 (map->Name {:myLast "Jones" :myFirst "Jinx" :myMiddle "Joy"})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)

    (println "\nAll tests passed!\n")
  )
)
]0;zer0relm@AJ-Desktop:~/cs214/Labs/Lab07/Clojure[01;32m[zer0relm@AJ-Desktop[01;37m Clojure[01;32m]$[00m clojure -m namete[K[KTester

#nameTester.Name{:myFirst John, :myMiddle Paul, :myLast Jones}
John Paul Jones

#nameTester.Name{:myFirst Jane, :myMiddle Penelope, :myLast Jones}
Jane Penelope Jones

#nameTester.Name{:myFirst Jinx, :myMiddle Joy, :myLast Jones}
Jinx Joy Jones

All tests passed!

]0;zer0relm@AJ-Desktop:~/cs214/Labs/Lab07/Clojure[01;32m[zer0relm@AJ-Desktop[01;37m Clojure[01;32m]$[00m exit

Script done on 2020-04-03 17:18:48-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-04-03 15:36:47-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="188" LINES="28"]
]0;zer0relm@AJ-Desktop:~/cs214/Labs/07/Java[01;32m[zer0relm@AJ-Desktop[01;37m Java[01;32m]$[00m cat NameTester.java
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: AJ Vrieland (ajv234)
 * Date: 04/03/2020 
 ************************************************************/

public class NameTester
{
  public static void main(String[] args)
  {
      Name aName = new Name("John", "Paul", "Jones");

      assert aName.getFirst().equals("John") ;
      assert aName.getMiddle().equals("Paul") ;
      assert aName.getLast().equals("Jones") ;

      System.out.println(aName);
      assert aName.toString().equals("John Paul Jones");

      System.out.println("All tests passed!");
  }
}

// Replace this line with the declaration of class Name...
class Name
{
  private String myFirst, myMiddle, myLast;

  public Name(String first, String middle, String last)
   {
      myFirst = first;
      myMiddle = middle;
      myLast = last;
   }

   public String getFirst(){
     return myFirst;
   }

   public String getMiddle(){
     return myMiddle;
   }

   public String getLast(){
     return myLast;
   }

   public String toString()
   {
      return myFirst + ' ' + myMiddle + ' ' + myLast;
   }
};
]0;zer0relm@AJ-Desktop:~/cs214/Labs/07/Java[01;32m[zer0relm@AJ-Desktop[01;37m Java[01;32m]$[00m make java
javac -deprecation NameTester.java
]0;zer0relm@AJ-Desktop:~/cs214/Labs/07/Java[01;32m[zer0relm@AJ-Desktop[01;37m Java[01;32m]$[00m java -a[Kea NameTester
John Paul Jones
All tests passed!
]0;zer0relm@AJ-Desktop:~/cs214/Labs/07/Java[01;32m[zer0relm@AJ-Desktop[01;37m Java[01;32m]$[00m exit

Script done on 2020-04-03 15:37:09-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-04-03 18:44:29-0400
]0;ajv234@cs-ssh: /home/cs/214/current/ajv234/Labs/Lab07/Ruby[01;32majv234@cs-ssh[00m:[01;34m/home/cs/214/current/ajv234/Labs/Lab07/Ruby[00m$ cat NameTester.rb 
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: AJ Vrieland (ajv234)
# Date: 04/03/2020
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

# Replace this line with the declaration of class Name
class Name
	def initialize(first, middle,last)
		@first, @middle, @last = first, middle, last
	end

	attr_reader :first, :middle, :last

	def fullName()
		return first + " " + middle + " " + last
	end
	
	def print() 
		puts fullName()
		return fullName()
	end
end

def testName
   name = Name.new("John", "Paul", "Jones")

   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.print == "John Paul Jones", "print failed"
   
   print "All tests passed!\n"
end

testName

]0;ajv234@cs-ssh: /home/cs/214/current/ajv234/Labs/Lab07/Ruby[01;32majv234@cs-ssh[00m:[01;34m/home/cs/214/current/ajv234/Labs/Lab07/Ruby[00m$ ruby NameTester.rb 
John Paul Jones
All tests passed!
]0;ajv234@cs-ssh: /home/cs/214/current/ajv234/Labs/Lab07/Ruby[01;32majv234@cs-ssh[00m:[01;34m/home/cs/214/current/ajv234/Labs/Lab07/Ruby[00m$ exit

Script done on 2020-04-03 18:44:53-0400
